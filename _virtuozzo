#compdef prlctl
#
# Virtuozzo 7 prlctl zsh completion
# Based on https://docs.virtuozzo.com/master/index.html

local -a _1st_arguments
_1st_arguments=(
  'backup:Backs up the specified virtual environment.'
  'backup-list:Lists the existing backups.'
  'backup-delete:Delete the backup for specified virtual environment.'
  'restore:Restore the specified virtual environment.'
  'capture:Take a screenshot of a current virtual environment console in PNG format.'
  'clone:Make a copy of a virtual environment'
  'console:Attach to the Containers console.'
  'create:Create a virtual environment'
  'delete:Delete a virtual environment'
  'destroy:Delete a virtual environment'
  'installtools:Connect  the  Virtuozzo  Guest  Tools image to the VE using its CD/DVD-ROM device,'
  'enter:Log in to the virtual environment. For virtual machines,'
  'exec:Execute the command command in the virtual environment.'
  'list:List the virtual environments currently existing on the Virtuozzo server.'
  'migrate:Migrates the specified virtual environment to a different server.'
  'pause:Pause the specified virtual environment.'
  'register:Register a virtual environment.'
  'reset:Reset the specified virtual environment.'
  'resume:Resume the specified virtual environment.'
  'restart:Restart the specified virtual environment.'
  'start:Start the specified virtual environment.'
  'status:Display the status of the specified virtual environment.'
  'change-sid:change the Windows security identifier (SID) of a VM'
  'stop:Stop the specified virtual environment.'
  'snapshot:This command is used to create VE snapshot.'
  'snapshot-delete:Deletes snapshot with the specified snapid.'
  'snapshot-list:This  command is used to list the virtual environments snapshots tree.'
  'snapshot-switch:Used to revert to selected snapshot.'
  'suspend:Suspend the specified virtual environment.'
  'unregister:Unregister the specified virtual environment.'
  'reset-uptime:Resets the specified virtual environment uptime counter (counter start date/time also will be reset with this action)'
  'mount:Mounts the specified virtual environment.'
  'umount:Unmounts the specified virtual environment.'
  'move:Moves the directory with files of the specified virtual environment to a new location on the same server.'
  'problem-report:Generate a problem report.'
  'statistics:Print performance statistics for running virtual machines and containers on the server.'
  'set:This command is used to set and configure various VE parameters.'
)

_guests() {
  while read -r guest
  do
    _wanted 'guest' expl 'guest' compadd $guest
  done <<< "$( prlctl list --all --no-header -o name 2>/dev/null )"
}

_arguments '*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
  _describe -t commands "prctl commands" _1st_arguments -V1
  return
fi

case "$words[1]" in
  list)
    _arguments \
      {-a,--all}'[List all, running, stopped, suspended, and paused virtual machines]' \
      {-t,--template}'[List the available virtual machine templates]' \
      '--no-header[Do not display column headers]' \
      {-o,--output}'[Specify field(s) to output]:type:(uuid envid status name dist owner system-flags description numproc ip ip_configured hostname netif mac features location iolimit netdev type ha_enable ha_prio)' \
      {-s,--sort}'[Sort output in ascending order by specified field]:type:(uuid envid status name dist owner system-flags description numproc ip ip_configured hostname netif mac features location iolimit netdev type ha_enable ha_prio)' \
      {-i,--info}'[Display detailed information about a virtual machine]' \
      '-L[List fields which can be used for both the output (-o, --output) and sort order (-s, --sort) options.]' \
      '--vmtype[Display only virtual environments of the specified type.:type:(ct vm all)]' \
      {-j,--json}'[Produce output in the JSON format.]' \
      {-f,--full}'[Display additional information about virtual environments..]'
  ;;

#  backup )
#    _arguments \
#      :guest:_guests
#  ;;

#  backup-list )
#    _arguments \
#      :guest:_guests
#  ;;

#  backup-delete )
#    _arguments \
#      :guest:_guests
#  ;;

#  restore )
#    _arguments \
#      :guest:_guests
#  ;;

  capture )
    _arguments \
      :guest:_guests \
      '--file[Path where to save the screenshot to]'
  ;;

#  clone )
#    _arguments \
#      :guest:_guests
#  ;;

  console )
    _arguments \
      :guest:_guests
  ;;

#  create )
#    _arguments \
#      :guest:_guests
#  ;;

  delete )
    _arguments \
      :guest:_guests \
      '--force'
  ;;

  installtools )
    _arguments \
      :guest:_guests
  ;;

  enter )
    _arguments \
      :guest:_guests
  ;;

#  exec )
#    _arguments \
#      :guest:_guests
#  ;;

#  migrate )
#    _arguments \
#      :guest:_guests
#  ;;

  pause )
    _arguments \
      :guest:_guests
  ;;

#  register )
#    _arguments \
#      :guest:_guests
#  ;;

  reset )
    _arguments \
      :guest:_guests
  ;;

  resume )
    _arguments \
      :guest:_guests
  ;;

  restart )
    _arguments \
      :guest:_guests
  ;;

  start )
    _arguments \
      :guest:_guests
  ;;

#  status )
#    _arguments \
#      :guest:_guests
#  ;;

#  change-sid )
#    _arguments \
#      :guest:_guests
#  ;;

  stop )
    _arguments \
      :guest:_guests \
      '--kill' \
      '--noforce'
  ;;

  snapshot )
    _arguments \
      :guest:_guests \
      {-n,--name}'[name of the snapshot]'
  ;;

#  snapshot-delete )
#    _arguments \
#      :guest:_guests
#  ;;

#  snapshot-list )
#    _arguments \
#      :guest:_guests
#  ;;

#  snapshot-switch )
#    _arguments \
#      :guest:_guests
#  ;;

  suspend )
    _arguments \
      :guest:_guests
  ;;

  unregister )
    _arguments \
      :guest:_guests
  ;;

  reset-uptime )
    _arguments \
      :guest:_guests
  ;;

#  mount )
#    _arguments \
#      :guest:_guests
#  ;;

  umount )
    _arguments \
      :guest:_guests
  ;;

#  move )
#    _arguments \
#      :guest:_guests
#  ;;

#  problem-report )
#    _arguments \
#      :guest:_guests
#  ;;

#  statistics )
#    _arguments \
#      :guest:_guests
#  ;;

#  set )
#    _arguments \
#      :guest:_guests
#  ;;
esac
